// <auto-generated />
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable
 namespace ConsoleApp16.Migrations
{
    [DbContext(typeof(iti))]
    [Migration("20250305164924_itief")]
    partial class itief
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("course", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("cname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("duration")
                        .HasColumnType("int");

                    b.Property<int>("topicid")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("topicid");

                    b.ToTable("courses");
                });

            modelBuilder.Entity("courseinstructor", b =>
                {
                    b.Property<int>("courseid")
                        .HasColumnType("int");

                    b.Property<int>("instructorid")
                        .HasColumnType("int");

                    b.Property<int>("evaluate")
                        .HasColumnType("int");

                    b.HasKey("courseid", "instructorid");

                    b.HasIndex("instructorid");

                    b.ToTable("courseinstructors");
                });

            modelBuilder.Entity("department", b =>
                {
                    b.Property<int>("Departmentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Departmentid"));

                    b.Property<string>("DName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("hiringdate")
                        .HasColumnType("datetime2");

                    b.Property<int>("instructorid")
                        .HasColumnType("int");

                    b.HasKey("Departmentid");

                    b.ToTable("departments");
                });

            modelBuilder.Entity("instructor", b =>
                {
                    b.Property<int>("Instructorid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Instructorid"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("bonus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("departmentid")
                        .HasColumnType("int");

                    b.Property<int>("hourrate")
                        .HasColumnType("int");

                    b.Property<int>("salary")
                        .HasColumnType("int");

                    b.HasKey("Instructorid");

                    b.HasIndex("departmentid");

                    b.ToTable("instructors");
                });

            modelBuilder.Entity("student", b =>
                {
                    b.Property<int>("Studentid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Studentid"));

                    b.Property<string>("FName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("age")
                        .HasColumnType("int");

                    b.Property<int>("departmentid")
                        .HasColumnType("int");

                    b.HasKey("Studentid");

                    b.HasIndex("departmentid");

                    b.ToTable("students");
                });

            modelBuilder.Entity("studentcourse", b =>
                {
                    b.Property<int>("courseid")
                        .HasColumnType("int");

                    b.Property<int>("studentid")
                        .HasColumnType("int");

                    b.Property<int>("grade")
                        .HasColumnType("int");

                    b.HasKey("courseid", "studentid");

                    b.HasIndex("studentid");

                    b.ToTable("studentcourses");
                });

            modelBuilder.Entity("topic", b =>
                {
                    b.Property<int>("Topicid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Topicid"));

                    b.Property<string>("tname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Topicid");

                    b.ToTable("topic");
                });

            modelBuilder.Entity("course", b =>
                {
                    b.HasOne("topic", "topic")
                        .WithMany("courses")
                        .HasForeignKey("topicid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("topic");
                });

            modelBuilder.Entity("courseinstructor", b =>
                {
                    b.HasOne("course", "course")
                        .WithMany("courseinstructors")
                        .HasForeignKey("courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("instructor", "instructor")
                        .WithMany("courseinstructors")
                        .HasForeignKey("instructorid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("instructor");
                });

            modelBuilder.Entity("instructor", b =>
                {
                    b.HasOne("department", "department")
                        .WithMany("instructors")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("student", b =>
                {
                    b.HasOne("department", "department")
                        .WithMany("students")
                        .HasForeignKey("departmentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("department");
                });

            modelBuilder.Entity("studentcourse", b =>
                {
                    b.HasOne("course", "course")
                        .WithMany("studentcourses")
                        .HasForeignKey("courseid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("student", "student")
                        .WithMany("studentcourses")
                        .HasForeignKey("studentid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("course");

                    b.Navigation("student");
                });

            modelBuilder.Entity("course", b =>
                {
                    b.Navigation("courseinstructors");

                    b.Navigation("studentcourses");
                });

            modelBuilder.Entity("department", b =>
                {
                    b.Navigation("instructors");

                    b.Navigation("students");
                });

            modelBuilder.Entity("instructor", b =>
                {
                    b.Navigation("courseinstructors");
                });

            modelBuilder.Entity("student", b =>
                {
                    b.Navigation("studentcourses");
                });

            modelBuilder.Entity("topic", b =>
                {
                    b.Navigation("courses");
                });
#pragma warning restore 612, 618
        }
    }
}

